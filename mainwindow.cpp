// –≤–µ—Ä—Å–∏—è 4014
// –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
#include "mainwindow.h"
#include <QMessageBox>
#include <QGridLayout>
#include <QGroupBox>
#include <QTextCursor>
#include <QDateTime>
#include <QElapsedTimer>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , m_socket(nullptr)
    , m_deviceIP("192.168.0.7")
    , m_devicePort(23)
    , m_testSequentialActive(false)  // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û
{
    setupUI();

    m_socket = new QTcpSocket(this);

    connect(m_socket, &QTcpSocket::connected, this, &MainWindow::onConnected);
    connect(m_socket, &QTcpSocket::disconnected, this, &MainWindow::onDisconnected);
    connect(m_socket, &QTcpSocket::readyRead, this, &MainWindow::onDataReceived);
    connect(m_socket, QOverload<QAbstractSocket::SocketError>::of(&QAbstractSocket::errorOccurred),
            this, &MainWindow::onError);
}

MainWindow::~MainWindow()
{
    if (m_socket && m_socket->state() == QTcpSocket::ConnectedState) {
        m_socket->disconnectFromHost();
    }
}

void MainWindow::setupUI()
{
    setWindowTitle("ADC Monitor");
    resize(1000, 600);

    QWidget *centralWidget = new QWidget(this);
    setCentralWidget(centralWidget);

    QHBoxLayout *mainLayout = new QHBoxLayout(centralWidget);

    // –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
    QVBoxLayout *leftLayout = new QVBoxLayout();

    // ===== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï =====
    QGroupBox *connectionGroup = new QGroupBox("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", this);
    QGridLayout *connectionLayout = new QGridLayout(connectionGroup);

    connectionLayout->addWidget(new QLabel("IP –∞–¥—Ä–µ—Å:"), 0, 0);
    m_ipEdit = new QLineEdit("192.168.0.7", this);
    connectionLayout->addWidget(m_ipEdit, 0, 1);

    connectionLayout->addWidget(new QLabel("–ü–æ—Ä—Ç:"), 1, 0);
    m_portEdit = new QLineEdit("23", this);
    connectionLayout->addWidget(m_portEdit, 1, 1);

    QHBoxLayout *buttonLayout = new QHBoxLayout();
    m_connectBtn = new QPushButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", this);
    m_disconnectBtn = new QPushButton("–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è", this);
    m_disconnectBtn->setEnabled(false);
    buttonLayout->addWidget(m_connectBtn);
    buttonLayout->addWidget(m_disconnectBtn);
    connectionLayout->addLayout(buttonLayout, 2, 0, 1, 2);

    QHBoxLayout *statusLayout = new QHBoxLayout();
    m_statusLabel = new QLabel("–û—Ç–∫–ª—é—á–µ–Ω–æ", this);
    m_statusLabel->setStyleSheet("QLabel { color: red; font-weight: bold; }");
    statusLayout->addWidget(m_statusLabel);

    m_ledWidget = new LedWidget(this);
    m_ledWidget->setFixedSize(40, 40);
    statusLayout->addStretch();
    statusLayout->addWidget(m_ledWidget);
    connectionLayout->addLayout(statusLayout, 3, 0, 1, 2);

    leftLayout->addWidget(connectionGroup);

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï ===== (–†–ê–°–®–ò–†–ï–ù–û)
    QGroupBox *ctrlGroup = new QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", this);
    QVBoxLayout *ctrlLayout = new QVBoxLayout(ctrlGroup);

    // –ü—Ä–æ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ
    QHBoxLayout *skipRow = new QHBoxLayout();
    QLabel *lbl = new QLabel("–ü—Ä–æ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ (1‚Äì500):", this);
    m_skipBox = new QSpinBox(this);
    m_skipBox->setRange(1, 500);
    m_skipBox->setValue(10);
    m_skipValue = 10;
    skipRow->addWidget(lbl);
    skipRow->addWidget(m_skipBox);
    skipRow->addStretch();
    ctrlLayout->addLayout(skipRow);

    connect(m_skipBox, QOverload<int>::of(&QSpinBox::valueChanged),
            this, [this](int val){ m_skipValue = val; m_graph->setSkipValue(val); });

    // ========== –ù–û–í–û–ï: –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è DAC ==========
    ctrlLayout->addSpacing(10);
    QLabel *dacLabel = new QLabel("<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DAC:</b>", this);
    ctrlLayout->addWidget(dacLabel);

    // –ö–Ω–æ–ø–∫–∞ "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç"
    m_testSequentialBtn = new QPushButton("‚ñ∂ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç", this);
    m_testSequentialBtn->setCheckable(true);
    m_testSequentialBtn->setStyleSheet(
        "QPushButton { padding: 8px; font-size: 12px; }"
        "QPushButton:checked { background-color: #90EE90; }"
    );
    ctrlLayout->addWidget(m_testSequentialBtn);
    connect(m_testSequentialBtn, &QPushButton::clicked,
            this, &MainWindow::onTestSequentialClicked);

    // –í setupUI() –¥–æ–±–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:

    QPushButton *testRawBtn = new QPushButton("üîß –¢–µ—Å—Ç —Å–≤—è–∑–∏", this);
    ctrlLayout->addWidget(testRawBtn);

    connect(testRawBtn, &QPushButton::clicked, this, [this]() {
        if (!m_socket || m_socket->state() != QTcpSocket::ConnectedState) {
            QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É 0xFF (—Ç–µ—Å—Ç–æ–≤–∞—è)
        QByteArray test;
        test.append(static_cast<char>(0xAA));
        test.append(static_cast<char>(0x55));
        test.append(static_cast<char>(0xFF));  // –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
        test.append(static_cast<char>(0x12));
        test.append(static_cast<char>(0x34));
        test.append(static_cast<char>(0xFF ^ 0x12 ^ 0x34));

        m_socket->write(test);
        m_socket->flush();

        qDebug() << "üîß –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç:" << test.toHex(' ');
    });


    // –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫–∏ "–í—ã—Ä–æ–≤–Ω—è—Ç—å" –∏ "–ú–µ–∞–Ω–¥—Ä"
    // ...

    ctrlLayout->addStretch();
    leftLayout->addWidget(ctrlGroup);
    leftLayout->addStretch();

    // –ì—Ä–∞—Ñ–∏–∫
    m_graph = new GraphWidget(this);
    m_graph->setMinimumWidth(650);

    mainLayout->addLayout(leftLayout, 0);
    mainLayout->addWidget(m_graph, 1);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    connect(m_connectBtn, &QPushButton::clicked,
            this, &MainWindow::connectToDevice);
    connect(m_disconnectBtn, &QPushButton::clicked,
            this, &MainWindow::disconnectFromDevice);
}

void MainWindow::connectToDevice()
{
    m_deviceIP = m_ipEdit->text();
    m_devicePort = m_portEdit->text().toUShort();

    if (m_deviceIP.isEmpty() || m_devicePort == 0) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP –∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç");
        return;
    }

    m_socket->connectToHost(m_deviceIP, m_devicePort);
    m_connectBtn->setEnabled(false);
}

void MainWindow::disconnectFromDevice()
{
    if (m_socket->state() == QTcpSocket::ConnectedState) {
        m_socket->disconnectFromHost();
    }
}

void MainWindow::onConnected()
{
    m_statusLabel->setText("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ");
    m_statusLabel->setStyleSheet("QLabel { color: green; font-weight: bold; }");

    m_connectBtn->setEnabled(false);
    m_disconnectBtn->setEnabled(true);
    m_ipEdit->setEnabled(false);
    m_portEdit->setEnabled(false);
}

void MainWindow::onDisconnected()
{
    m_statusLabel->setText("–û—Ç–∫–ª—é—á–µ–Ω–æ");
    m_statusLabel->setStyleSheet("QLabel { color: red; font-weight: bold; }");

    m_connectBtn->setEnabled(true);
    m_disconnectBtn->setEnabled(false);
    m_ipEdit->setEnabled(true);
    m_portEdit->setEnabled(true);

    m_ledWidget->setState(false);

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    m_testSequentialActive = false;
    m_testSequentialBtn->setChecked(false);
    m_testSequentialBtn->setText("‚ñ∂ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç");
}

void MainWindow::onDataReceived()
{
    QByteArray newData = m_socket->readAll();
    rxBuffer.append(newData);

    static int skipCounter = 0;
    bool foundSomething = true;

    // ========== –¶–ò–ö–õ –†–ê–ó–ë–û–†–ê –ë–£–§–ï–†–ê ==========
    while (foundSomething && rxBuffer.size() > 0) {
        foundSomething = false;

        // ========== –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü–æ–∏—Å–∫ Echo –∫–æ–º–∞–Ω–¥—ã ==========
        // –§–æ—Ä–º–∞—Ç: [0xAA][0xEE][CMD][DATA1][DATA2]
        for (int i = 0; i <= rxBuffer.size() - 5; i++) {
            if (static_cast<quint8>(rxBuffer.at(i)) == 0xAA &&
                static_cast<quint8>(rxBuffer.at(i + 1)) == 0xEE) {

                quint8 echo_cmd = static_cast<quint8>(rxBuffer.at(i + 2));
                quint8 echo_data1 = static_cast<quint8>(rxBuffer.at(i + 3));
                quint8 echo_data2 = static_cast<quint8>(rxBuffer.at(i + 4));

                qDebug() << "‚úÖ Echo –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω:";
                qDebug() << "   CMD:" << QString("0x%1").arg(echo_cmd, 2, 16, QChar('0'));
                qDebug() << "   DATA1:" << QString("0x%1").arg(echo_data1, 2, 16, QChar('0'));
                qDebug() << "   DATA2:" << QString("0x%1").arg(echo_data2, 2, 16, QChar('0'));

                // –£–¥–∞–ª–∏—Ç—å Echo (–∏ –≤–µ—Å—å –º—É—Å–æ—Ä –¥–æ –Ω–µ–≥–æ)
                rxBuffer.remove(0, i + 5);
                foundSomething = true;
                break;  // –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ–∏—Å–∫–∞ Echo
            }
        }

        if (foundSomething) continue;  // –ù–∞—à–ª–∏ Echo, –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞

        // ========== –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü–æ–∏—Å–∫ –±–∞—Ç—á–∞ –ê–¶–ü ==========
        // –§–æ—Ä–º–∞—Ç: [0xBB][N][...–¥–∞–Ω–Ω—ã–µ...][0xCC]
        for (int i = 0; i <= rxBuffer.size() - 2; i++) {
            if (static_cast<quint8>(rxBuffer.at(i)) == 0xBB) {
                // –ù–∞—à–ª–∏ –Ω–∞—á–∞–ª–æ –±–∞—Ç—á–∞

                if (rxBuffer.size() < i + 2) {
                    // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á—Ç–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
                    break;
                }

                quint8 batch_count = static_cast<quint8>(rxBuffer.at(i + 1));

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞
                if (batch_count == 0 || batch_count > 30) {
                    // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä - —ç—Ç–æ –Ω–µ –±–∞—Ç—á, –∞ —Å–ª—É—á–∞–π–Ω—ã–π 0xBB
                    rxBuffer.remove(0, 1);
                    foundSomething = true;
                    break;
                }

                // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ (2) + –ò–∑–º–µ—Ä–µ–Ω–∏—è (N √ó 9) + –ö–æ–Ω–µ—Ü (1)
                int expected_size = 2 + batch_count * 9 + 1;

                if (rxBuffer.size() < i + expected_size) {
                    // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö - –∂–¥—ë–º
                    break;
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∫–µ—Ä–∞ –∫–æ–Ω—Ü–∞ –±–∞—Ç—á–∞
                if (static_cast<quint8>(rxBuffer.at(i + expected_size - 1)) != 0xCC) {
                    // –ù–µ—Ç –º–∞—Ä–∫–µ—Ä–∞ –∫–æ–Ω—Ü–∞ - —ç—Ç–æ –Ω–µ –±–∞—Ç—á
                    rxBuffer.remove(0, i + 1);
                    foundSomething = true;
                    break;
                }

                // ========== –í–ê–õ–ò–î–ù–´–ô –ë–ê–¢–ß! –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ ==========
                int pos = i + 2;  // –ù–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Å–ª–µ 0xBB –∏ —Ä–∞–∑–º–µ—Ä–∞)

                for (quint8 m = 0; m < batch_count; m++) {
                    // –ß—Ç–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è (9 –±–∞–π—Ç)
                    char ledChar = rxBuffer.at(pos);
                    pos++;

                    quint16 adc[4];
                    for (int ch = 0; ch < 4; ch++) {
                        quint8 hi = static_cast<quint8>(rxBuffer.at(pos++));
                        quint8 lo = static_cast<quint8>(rxBuffer.at(pos++));
                        adc[ch] = (hi << 8) | lo;
                    }

                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ LED (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞—Ç—á–µ)
                    if (m == batch_count - 1) {
                        m_ledWidget->setState(ledChar == '1');
                    }

                    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä–∞—Ñ–∏–∫ —Å –ø—Ä–æ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ–º
                    skipCounter++;
                    if (skipCounter >= m_skipValue) {
                        skipCounter = 0;

                        QVector<quint16> v(4);
                        for (int ch = 0; ch < 4; ch++) {
                            v[ch] = adc[ch];
                        }
                        m_graph->addValues(v);
                    }
                }

                // –£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–∞—Ç—á (–≤–∫–ª—é—á–∞—è –º—É—Å–æ—Ä –¥–æ –Ω–µ–≥–æ)
                rxBuffer.remove(0, i + expected_size);
                foundSomething = true;
                break;  // –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ–∏—Å–∫–∞ –±–∞—Ç—á–µ–π
            }
        }

        if (foundSomething) continue;  // –ù–∞—à–ª–∏ –±–∞—Ç—á, –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞

        // ========== –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ –∏ –±—É—Ñ–µ—Ä –±–æ–ª—å—à–æ–π - —É–¥–∞–ª–∏—Ç—å –º—É—Å–æ—Ä ==========
        if (rxBuffer.size() > 1000) {
            // –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–≤—ã–µ 100 –±–∞–π—Ç (—è–≤–Ω—ã–π –º—É—Å–æ—Ä)
            rxBuffer.remove(0, 100);
            foundSomething = true;
        }
    }

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    static QElapsedTimer frameTimer;
    static bool timerStarted = false;
    if (!timerStarted) {
        frameTimer.start();
        timerStarted = true;
    }

    if (frameTimer.elapsed() >= 50) {  // 20 FPS
        frameTimer.restart();
        m_graph->update();
    }
}

void MainWindow::onError(QAbstractSocket::SocketError error)
{
    QString errorString;
    switch (error) {
        case QAbstractSocket::HostNotFoundError:
            errorString = "–•–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω";
            break;
        case QAbstractSocket::ConnectionRefusedError:
            errorString = "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ";
            break;
        case QAbstractSocket::RemoteHostClosedError:
            errorString = "–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ö–æ—Å—Ç –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ";
            break;
        default:
            errorString = m_socket->errorString();
    }

    m_connectBtn->setEnabled(true);
    m_disconnectBtn->setEnabled(false);
    m_ipEdit->setEnabled(true);
    m_portEdit->setEnabled(true);
}

void MainWindow::appendLog(const QString &text)
{
    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
}
// ========== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è sendCommand() ==========
void MainWindow::sendCommand(quint8 cmd, quint8 data1, quint8 data2)
{
    if (!m_socket || m_socket->state() != QTcpSocket::ConnectedState) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º");
        qDebug() << "‚ùå –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è";
        return;
    }

    QByteArray packet;
    packet.append(static_cast<char>(0xAA));  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    packet.append(static_cast<char>(0x55));  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    packet.append(static_cast<char>(cmd));   // –ö–æ–º–∞–Ω–¥–∞
    packet.append(static_cast<char>(data1)); // –î–∞–Ω–Ω—ã–µ 1
    packet.append(static_cast<char>(data2)); // –î–∞–Ω–Ω—ã–µ 2

    // –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞
    quint8 checksum = cmd ^ data1 ^ data2;
    packet.append(static_cast<char>(checksum));

    // –û—Ç–ø—Ä–∞–≤–∫–∞
    qint64 bytesWritten = m_socket->write(packet);  // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ
    m_socket->flush();

    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    qDebug() << "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–∞–π—Ç:" << bytesWritten;
    qDebug() << "   HEX:" << packet.toHex(' ');
    qDebug() << "   CMD:" << QString("0x%1").arg(cmd, 2, 16, QChar('0'));
    qDebug() << "   DATA1:" << QString("0x%1").arg(data1, 2, 16, QChar('0'));
    qDebug() << "   DATA2:" << QString("0x%1").arg(data2, 2, 16, QChar('0'));
    qDebug() << "   CHECKSUM:" << QString("0x%1").arg(checksum, 2, 16, QChar('0'));
}

// ========== –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç" ==========
void MainWindow::onTestSequentialClicked()
{
    m_testSequentialActive = !m_testSequentialActive;

    if (m_testSequentialActive) {
        // –í–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç
        sendCommand(0x01, 0x01, 0x00);  // CMD=0x01, DATA1=0x01 (—Å—Ç–∞—Ä—Ç)
        m_testSequentialBtn->setText("‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç");
        m_testSequentialBtn->setChecked(true);
    } else {
        // –í—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç
        sendCommand(0x01, 0x00, 0x00);  // CMD=0x01, DATA1=0x00 (—Å—Ç–æ–ø)
        m_testSequentialBtn->setText("‚ñ∂ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç");
        m_testSequentialBtn->setChecked(false);
    }
}
